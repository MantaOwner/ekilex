/*
 * This file is generated by jOOQ.
 */
package eki.wordweb.data.db.tables;


import eki.wordweb.data.db.Indexes;
import eki.wordweb.data.db.Public;
import eki.wordweb.data.db.tables.records.MviewWwMeaningRecord;
import eki.wordweb.data.db.udt.records.TypeDefinitionRecord;
import eki.wordweb.data.db.udt.records.TypeDomainRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MviewWwMeaning extends TableImpl<MviewWwMeaningRecord> {

    private static final long serialVersionUID = 1939552898;

    /**
     * The reference instance of <code>public.mview_ww_meaning</code>
     */
    public static final MviewWwMeaning MVIEW_WW_MEANING = new MviewWwMeaning();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MviewWwMeaningRecord> getRecordType() {
        return MviewWwMeaningRecord.class;
    }

    /**
     * The column <code>public.mview_ww_meaning.meaning_id</code>.
     */
    public final TableField<MviewWwMeaningRecord, Long> MEANING_ID = createField("meaning_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.mview_ww_meaning.domain_codes</code>.
     */
    public final TableField<MviewWwMeaningRecord, TypeDomainRecord[]> DOMAIN_CODES = createField("domain_codes", eki.wordweb.data.db.udt.TypeDomain.TYPE_DOMAIN.getDataType().getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.image_files</code>.
     */
    public final TableField<MviewWwMeaningRecord, String[]> IMAGE_FILES = createField("image_files", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.systematic_polysemy_patterns</code>.
     */
    public final TableField<MviewWwMeaningRecord, String[]> SYSTEMATIC_POLYSEMY_PATTERNS = createField("systematic_polysemy_patterns", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.semantic_types</code>.
     */
    public final TableField<MviewWwMeaningRecord, String[]> SEMANTIC_TYPES = createField("semantic_types", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.learner_comments</code>.
     */
    public final TableField<MviewWwMeaningRecord, String[]> LEARNER_COMMENTS = createField("learner_comments", org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    /**
     * The column <code>public.mview_ww_meaning.definitions</code>.
     */
    public final TableField<MviewWwMeaningRecord, TypeDefinitionRecord[]> DEFINITIONS = createField("definitions", eki.wordweb.data.db.udt.TypeDefinition.TYPE_DEFINITION.getDataType().getArrayDataType(), this, "");

    /**
     * Create a <code>public.mview_ww_meaning</code> table reference
     */
    public MviewWwMeaning() {
        this(DSL.name("mview_ww_meaning"), null);
    }

    /**
     * Create an aliased <code>public.mview_ww_meaning</code> table reference
     */
    public MviewWwMeaning(String alias) {
        this(DSL.name(alias), MVIEW_WW_MEANING);
    }

    /**
     * Create an aliased <code>public.mview_ww_meaning</code> table reference
     */
    public MviewWwMeaning(Name alias) {
        this(alias, MVIEW_WW_MEANING);
    }

    private MviewWwMeaning(Name alias, Table<MviewWwMeaningRecord> aliased) {
        this(alias, aliased, null);
    }

    private MviewWwMeaning(Name alias, Table<MviewWwMeaningRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MviewWwMeaning(Table<O> child, ForeignKey<O, MviewWwMeaningRecord> key) {
        super(child, key, MVIEW_WW_MEANING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MVIEW_WW_MEANING_MEANING_ID_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MviewWwMeaning as(String alias) {
        return new MviewWwMeaning(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MviewWwMeaning as(Name alias) {
        return new MviewWwMeaning(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MviewWwMeaning rename(String name) {
        return new MviewWwMeaning(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MviewWwMeaning rename(Name name) {
        return new MviewWwMeaning(name, null);
    }
}
