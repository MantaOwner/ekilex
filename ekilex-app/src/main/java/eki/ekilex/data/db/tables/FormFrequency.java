/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.FormFrequencyRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FormFrequency extends TableImpl<FormFrequencyRecord> {

    private static final long serialVersionUID = 1917808387;

    /**
     * The reference instance of <code>public.form_frequency</code>
     */
    public static final FormFrequency FORM_FREQUENCY = new FormFrequency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FormFrequencyRecord> getRecordType() {
        return FormFrequencyRecord.class;
    }

    /**
     * The column <code>public.form_frequency.id</code>.
     */
    public final TableField<FormFrequencyRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('form_frequency_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.form_frequency.source_name</code>.
     */
    public final TableField<FormFrequencyRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.form_frequency.created_on</code>.
     */
    public final TableField<FormFrequencyRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("statement_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.form_frequency.word_value</code>.
     */
    public final TableField<FormFrequencyRecord, String> WORD_VALUE = createField(DSL.name("word_value"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.form_frequency.morph_code</code>.
     */
    public final TableField<FormFrequencyRecord, String> MORPH_CODE = createField(DSL.name("morph_code"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.form_frequency.form_value</code>.
     */
    public final TableField<FormFrequencyRecord, String> FORM_VALUE = createField(DSL.name("form_value"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.form_frequency.rank</code>.
     */
    public final TableField<FormFrequencyRecord, Long> RANK = createField(DSL.name("rank"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.form_frequency.value</code>.
     */
    public final TableField<FormFrequencyRecord, BigDecimal> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.NUMERIC(12, 7).nullable(false), this, "");

    /**
     * Create a <code>public.form_frequency</code> table reference
     */
    public FormFrequency() {
        this(DSL.name("form_frequency"), null);
    }

    /**
     * Create an aliased <code>public.form_frequency</code> table reference
     */
    public FormFrequency(String alias) {
        this(DSL.name(alias), FORM_FREQUENCY);
    }

    /**
     * Create an aliased <code>public.form_frequency</code> table reference
     */
    public FormFrequency(Name alias) {
        this(alias, FORM_FREQUENCY);
    }

    private FormFrequency(Name alias, Table<FormFrequencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private FormFrequency(Name alias, Table<FormFrequencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FormFrequency(Table<O> child, ForeignKey<O, FormFrequencyRecord> key) {
        super(child, key, FORM_FREQUENCY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FORM_FREQUENCY_FORM_VALUE_IDX, Indexes.FORM_FREQUENCY_MORPH_CODE_IDX, Indexes.FORM_FREQUENCY_SOURCE_NAME_IDX, Indexes.FORM_FREQUENCY_WORD_VALUE_IDX);
    }

    @Override
    public Identity<FormFrequencyRecord, Long> getIdentity() {
        return Keys.IDENTITY_FORM_FREQUENCY;
    }

    @Override
    public UniqueKey<FormFrequencyRecord> getPrimaryKey() {
        return Keys.FORM_FREQUENCY_PKEY;
    }

    @Override
    public List<UniqueKey<FormFrequencyRecord>> getKeys() {
        return Arrays.<UniqueKey<FormFrequencyRecord>>asList(Keys.FORM_FREQUENCY_PKEY);
    }

    @Override
    public List<ForeignKey<FormFrequencyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FormFrequencyRecord, ?>>asList(Keys.FORM_FREQUENCY__FORM_FREQUENCY_MORPH_CODE_FKEY);
    }

    public Morph morph() {
        return new Morph(this, Keys.FORM_FREQUENCY__FORM_FREQUENCY_MORPH_CODE_FKEY);
    }

    @Override
    public FormFrequency as(String alias) {
        return new FormFrequency(DSL.name(alias), this);
    }

    @Override
    public FormFrequency as(Name alias) {
        return new FormFrequency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FormFrequency rename(String name) {
        return new FormFrequency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FormFrequency rename(Name name) {
        return new FormFrequency(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, Timestamp, String, String, String, Long, BigDecimal> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
