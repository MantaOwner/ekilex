/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ProcessLogRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProcessLog extends TableImpl<ProcessLogRecord> {

    private static final long serialVersionUID = 1610528757;

    /**
     * The reference instance of <code>public.process_log</code>
     */
    public static final ProcessLog PROCESS_LOG = new ProcessLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessLogRecord> getRecordType() {
        return ProcessLogRecord.class;
    }

    /**
     * The column <code>public.process_log.id</code>.
     */
    public final TableField<ProcessLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('process_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.process_log.event_by</code>.
     */
    public final TableField<ProcessLogRecord, String> EVENT_BY = createField("event_by", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.process_log.event_on</code>.
     */
    public final TableField<ProcessLogRecord, Timestamp> EVENT_ON = createField("event_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("statement_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.process_log.comment</code>.
     */
    public final TableField<ProcessLogRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.process_log.comment_prese</code>.
     */
    public final TableField<ProcessLogRecord, String> COMMENT_PRESE = createField("comment_prese", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.process_log.process_state_code</code>.
     */
    public final TableField<ProcessLogRecord, String> PROCESS_STATE_CODE = createField("process_state_code", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.process_log.dataset_code</code>.
     */
    public final TableField<ProcessLogRecord, String> DATASET_CODE = createField("dataset_code", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.process_log.layer_name</code>.
     */
    public final TableField<ProcessLogRecord, String> LAYER_NAME = createField("layer_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>public.process_log</code> table reference
     */
    public ProcessLog() {
        this(DSL.name("process_log"), null);
    }

    /**
     * Create an aliased <code>public.process_log</code> table reference
     */
    public ProcessLog(String alias) {
        this(DSL.name(alias), PROCESS_LOG);
    }

    /**
     * Create an aliased <code>public.process_log</code> table reference
     */
    public ProcessLog(Name alias) {
        this(alias, PROCESS_LOG);
    }

    private ProcessLog(Name alias, Table<ProcessLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProcessLog(Name alias, Table<ProcessLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProcessLog(Table<O> child, ForeignKey<O, ProcessLogRecord> key) {
        super(child, key, PROCESS_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESS_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProcessLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROCESS_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProcessLogRecord> getPrimaryKey() {
        return Keys.PROCESS_LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProcessLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ProcessLogRecord>>asList(Keys.PROCESS_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProcessLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProcessLogRecord, ?>>asList(Keys.PROCESS_LOG__PROCESS_LOG_PROCESS_STATE_CODE_FKEY, Keys.PROCESS_LOG__PROCESS_LOG_DATASET_CODE_FKEY);
    }

    public ProcessState processState() {
        return new ProcessState(this, Keys.PROCESS_LOG__PROCESS_LOG_PROCESS_STATE_CODE_FKEY);
    }

    public Dataset dataset() {
        return new Dataset(this, Keys.PROCESS_LOG__PROCESS_LOG_DATASET_CODE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessLog as(String alias) {
        return new ProcessLog(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProcessLog as(Name alias) {
        return new ProcessLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessLog rename(String name) {
        return new ProcessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProcessLog rename(Name name) {
        return new ProcessLog(name, null);
    }
}
