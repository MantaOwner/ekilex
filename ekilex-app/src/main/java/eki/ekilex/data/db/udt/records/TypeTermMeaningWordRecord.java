/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt.records;


import eki.ekilex.data.db.udt.TypeTermMeaningWord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeTermMeaningWordRecord extends UDTRecordImpl<TypeTermMeaningWordRecord> implements Record6<Long, String, Integer, String, Boolean, String[]> {

    private static final long serialVersionUID = 1416747308;

    /**
     * Setter for <code>public.type_term_meaning_word.word_id</code>.
     */
    public void setWordId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.type_term_meaning_word.word_id</code>.
     */
    public Long getWordId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.type_term_meaning_word.word</code>.
     */
    public void setWord(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.type_term_meaning_word.word</code>.
     */
    public String getWord() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.type_term_meaning_word.homonym_nr</code>.
     */
    public void setHomonymNr(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.type_term_meaning_word.homonym_nr</code>.
     */
    public Integer getHomonymNr() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.type_term_meaning_word.lang</code>.
     */
    public void setLang(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.type_term_meaning_word.lang</code>.
     */
    public String getLang() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.type_term_meaning_word.matching_word</code>.
     */
    public void setMatchingWord(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.type_term_meaning_word.matching_word</code>.
     */
    public Boolean getMatchingWord() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>public.type_term_meaning_word.dataset_codes</code>.
     */
    public void setDatasetCodes(String... value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.type_term_meaning_word.dataset_codes</code>.
     */
    public String[] getDatasetCodes() {
        return (String[]) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Long, String, Integer, String, Boolean, String[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Long, String, Integer, String, Boolean, String[]> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return TypeTermMeaningWord.WORD_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return TypeTermMeaningWord.WORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return TypeTermMeaningWord.HOMONYM_NR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return TypeTermMeaningWord.LANG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field5() {
        return TypeTermMeaningWord.MATCHING_WORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String[]> field6() {
        return TypeTermMeaningWord.DATASET_CODES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getWordId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getWord();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getHomonymNr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getLang();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component5() {
        return getMatchingWord();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] component6() {
        return getDatasetCodes();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getWordId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getWord();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getHomonymNr();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getLang();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value5() {
        return getMatchingWord();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] value6() {
        return getDatasetCodes();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeTermMeaningWordRecord value1(Long value) {
        setWordId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeTermMeaningWordRecord value2(String value) {
        setWord(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeTermMeaningWordRecord value3(Integer value) {
        setHomonymNr(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeTermMeaningWordRecord value4(String value) {
        setLang(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeTermMeaningWordRecord value5(Boolean value) {
        setMatchingWord(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeTermMeaningWordRecord value6(String... value) {
        setDatasetCodes(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TypeTermMeaningWordRecord values(Long value1, String value2, Integer value3, String value4, Boolean value5, String[] value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TypeTermMeaningWordRecord
     */
    public TypeTermMeaningWordRecord() {
        super(TypeTermMeaningWord.TYPE_TERM_MEANING_WORD);
    }

    /**
     * Create a detached, initialised TypeTermMeaningWordRecord
     */
    public TypeTermMeaningWordRecord(Long wordId, String word, Integer homonymNr, String lang, Boolean matchingWord, String[] datasetCodes) {
        super(TypeTermMeaningWord.TYPE_TERM_MEANING_WORD);

        set(0, wordId);
        set(1, word);
        set(2, homonymNr);
        set(3, lang);
        set(4, matchingWord);
        set(5, datasetCodes);
    }
}
