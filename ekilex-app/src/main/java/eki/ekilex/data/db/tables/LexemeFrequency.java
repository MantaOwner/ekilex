/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.LexemeFrequencyRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeFrequency extends TableImpl<LexemeFrequencyRecord> {

    private static final long serialVersionUID = 529660459;

    /**
     * The reference instance of <code>public.lexeme_frequency</code>
     */
    public static final LexemeFrequency LEXEME_FREQUENCY = new LexemeFrequency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemeFrequencyRecord> getRecordType() {
        return LexemeFrequencyRecord.class;
    }

    /**
     * The column <code>public.lexeme_frequency.id</code>.
     */
    public final TableField<LexemeFrequencyRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('lexeme_frequency_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.lexeme_frequency.lexeme_id</code>.
     */
    public final TableField<LexemeFrequencyRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_frequency.source_name</code>.
     */
    public final TableField<LexemeFrequencyRecord, String> SOURCE_NAME = createField(DSL.name("source_name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_frequency.created_on</code>.
     */
    public final TableField<LexemeFrequencyRecord, Timestamp> CREATED_ON = createField(DSL.name("created_on"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("statement_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.lexeme_frequency.rank</code>.
     */
    public final TableField<LexemeFrequencyRecord, Long> RANK = createField(DSL.name("rank"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_frequency.value</code>.
     */
    public final TableField<LexemeFrequencyRecord, BigDecimal> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.NUMERIC(12, 7).nullable(false), this, "");

    /**
     * Create a <code>public.lexeme_frequency</code> table reference
     */
    public LexemeFrequency() {
        this(DSL.name("lexeme_frequency"), null);
    }

    /**
     * Create an aliased <code>public.lexeme_frequency</code> table reference
     */
    public LexemeFrequency(String alias) {
        this(DSL.name(alias), LEXEME_FREQUENCY);
    }

    /**
     * Create an aliased <code>public.lexeme_frequency</code> table reference
     */
    public LexemeFrequency(Name alias) {
        this(alias, LEXEME_FREQUENCY);
    }

    private LexemeFrequency(Name alias, Table<LexemeFrequencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexemeFrequency(Name alias, Table<LexemeFrequencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> LexemeFrequency(Table<O> child, ForeignKey<O, LexemeFrequencyRecord> key) {
        super(child, key, LEXEME_FREQUENCY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEXEME_FREQUENCY_LEXEME_ID_IDX, Indexes.LEXEME_FREQUENCY_SOURCE_NAME_IDX);
    }

    @Override
    public Identity<LexemeFrequencyRecord, Long> getIdentity() {
        return Keys.IDENTITY_LEXEME_FREQUENCY;
    }

    @Override
    public UniqueKey<LexemeFrequencyRecord> getPrimaryKey() {
        return Keys.LEXEME_FREQUENCY_PKEY;
    }

    @Override
    public List<UniqueKey<LexemeFrequencyRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemeFrequencyRecord>>asList(Keys.LEXEME_FREQUENCY_PKEY, Keys.LEXEME_FREQUENCY_LEXEME_ID_SOURCE_NAME_KEY);
    }

    @Override
    public List<ForeignKey<LexemeFrequencyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemeFrequencyRecord, ?>>asList(Keys.LEXEME_FREQUENCY__LEXEME_FREQUENCY_LEXEME_ID_FKEY);
    }

    public Lexeme lexeme() {
        return new Lexeme(this, Keys.LEXEME_FREQUENCY__LEXEME_FREQUENCY_LEXEME_ID_FKEY);
    }

    @Override
    public LexemeFrequency as(String alias) {
        return new LexemeFrequency(DSL.name(alias), this);
    }

    @Override
    public LexemeFrequency as(Name alias) {
        return new LexemeFrequency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeFrequency rename(String name) {
        return new LexemeFrequency(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeFrequency rename(Name name) {
        return new LexemeFrequency(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Timestamp, Long, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
