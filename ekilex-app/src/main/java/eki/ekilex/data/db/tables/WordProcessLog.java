/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.WordProcessLogRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordProcessLog extends TableImpl<WordProcessLogRecord> {

    private static final long serialVersionUID = -33084097;

    /**
     * The reference instance of <code>public.word_process_log</code>
     */
    public static final WordProcessLog WORD_PROCESS_LOG = new WordProcessLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordProcessLogRecord> getRecordType() {
        return WordProcessLogRecord.class;
    }

    /**
     * The column <code>public.word_process_log.id</code>.
     */
    public final TableField<WordProcessLogRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('word_process_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.word_process_log.word_id</code>.
     */
    public final TableField<WordProcessLogRecord, Long> WORD_ID = createField(DSL.name("word_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_process_log.process_log_id</code>.
     */
    public final TableField<WordProcessLogRecord, Long> PROCESS_LOG_ID = createField(DSL.name("process_log_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.word_process_log</code> table reference
     */
    public WordProcessLog() {
        this(DSL.name("word_process_log"), null);
    }

    /**
     * Create an aliased <code>public.word_process_log</code> table reference
     */
    public WordProcessLog(String alias) {
        this(DSL.name(alias), WORD_PROCESS_LOG);
    }

    /**
     * Create an aliased <code>public.word_process_log</code> table reference
     */
    public WordProcessLog(Name alias) {
        this(alias, WORD_PROCESS_LOG);
    }

    private WordProcessLog(Name alias, Table<WordProcessLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordProcessLog(Name alias, Table<WordProcessLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> WordProcessLog(Table<O> child, ForeignKey<O, WordProcessLogRecord> key) {
        super(child, key, WORD_PROCESS_LOG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORD_PROCESS_LOG_LOG_ID_IDX, Indexes.WORD_PROCESS_LOG_WORD_ID_IDX);
    }

    @Override
    public Identity<WordProcessLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_WORD_PROCESS_LOG;
    }

    @Override
    public UniqueKey<WordProcessLogRecord> getPrimaryKey() {
        return Keys.WORD_PROCESS_LOG_PKEY;
    }

    @Override
    public List<UniqueKey<WordProcessLogRecord>> getKeys() {
        return Arrays.<UniqueKey<WordProcessLogRecord>>asList(Keys.WORD_PROCESS_LOG_PKEY);
    }

    @Override
    public List<ForeignKey<WordProcessLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordProcessLogRecord, ?>>asList(Keys.WORD_PROCESS_LOG__WORD_PROCESS_LOG_WORD_ID_FKEY, Keys.WORD_PROCESS_LOG__WORD_PROCESS_LOG_PROCESS_LOG_ID_FKEY);
    }

    public Word word() {
        return new Word(this, Keys.WORD_PROCESS_LOG__WORD_PROCESS_LOG_WORD_ID_FKEY);
    }

    public ProcessLog processLog() {
        return new ProcessLog(this, Keys.WORD_PROCESS_LOG__WORD_PROCESS_LOG_PROCESS_LOG_ID_FKEY);
    }

    @Override
    public WordProcessLog as(String alias) {
        return new WordProcessLog(DSL.name(alias), this);
    }

    @Override
    public WordProcessLog as(Name alias) {
        return new WordProcessLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordProcessLog rename(String name) {
        return new WordProcessLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordProcessLog rename(Name name) {
        return new WordProcessLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
