/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables.records;


import eki.ekilex.data.db.tables.MeaningProcessLog;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeaningProcessLogRecord extends UpdatableRecordImpl<MeaningProcessLogRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 827064264;

    /**
     * Setter for <code>public.meaning_process_log.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.meaning_process_log.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.meaning_process_log.meaning_id</code>.
     */
    public void setMeaningId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.meaning_process_log.meaning_id</code>.
     */
    public Long getMeaningId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.meaning_process_log.process_log_id</code>.
     */
    public void setProcessLogId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.meaning_process_log.process_log_id</code>.
     */
    public Long getProcessLogId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return MeaningProcessLog.MEANING_PROCESS_LOG.ID;
    }

    @Override
    public Field<Long> field2() {
        return MeaningProcessLog.MEANING_PROCESS_LOG.MEANING_ID;
    }

    @Override
    public Field<Long> field3() {
        return MeaningProcessLog.MEANING_PROCESS_LOG.PROCESS_LOG_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getMeaningId();
    }

    @Override
    public Long component3() {
        return getProcessLogId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getMeaningId();
    }

    @Override
    public Long value3() {
        return getProcessLogId();
    }

    @Override
    public MeaningProcessLogRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public MeaningProcessLogRecord value2(Long value) {
        setMeaningId(value);
        return this;
    }

    @Override
    public MeaningProcessLogRecord value3(Long value) {
        setProcessLogId(value);
        return this;
    }

    @Override
    public MeaningProcessLogRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeaningProcessLogRecord
     */
    public MeaningProcessLogRecord() {
        super(MeaningProcessLog.MEANING_PROCESS_LOG);
    }

    /**
     * Create a detached, initialised MeaningProcessLogRecord
     */
    public MeaningProcessLogRecord(Long id, Long meaningId, Long processLogId) {
        super(MeaningProcessLog.MEANING_PROCESS_LOG);

        set(0, id);
        set(1, meaningId);
        set(2, processLogId);
    }
}
