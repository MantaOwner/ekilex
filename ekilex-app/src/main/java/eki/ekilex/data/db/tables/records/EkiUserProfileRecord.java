/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables.records;


import eki.ekilex.data.db.tables.EkiUserProfile;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EkiUserProfileRecord extends UpdatableRecordImpl<EkiUserProfileRecord> implements Record6<Long, Long, Long, String[], String[], String[]> {

    private static final long serialVersionUID = -82336114;

    /**
     * Setter for <code>public.eki_user_profile.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.eki_user_profile.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.eki_user_profile.user_id</code>.
     */
    public void setUserId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.eki_user_profile.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.eki_user_profile.recent_dataset_permission_id</code>.
     */
    public void setRecentDatasetPermissionId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.eki_user_profile.recent_dataset_permission_id</code>.
     */
    public Long getRecentDatasetPermissionId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.eki_user_profile.preferred_datasets</code>.
     */
    public void setPreferredDatasets(String... value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.eki_user_profile.preferred_datasets</code>.
     */
    public String[] getPreferredDatasets() {
        return (String[]) get(3);
    }

    /**
     * Setter for <code>public.eki_user_profile.preferred_biling_candidate_langs</code>.
     */
    public void setPreferredBilingCandidateLangs(String... value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.eki_user_profile.preferred_biling_candidate_langs</code>.
     */
    public String[] getPreferredBilingCandidateLangs() {
        return (String[]) get(4);
    }

    /**
     * Setter for <code>public.eki_user_profile.preferred_biling_lex_meaning_word_langs</code>.
     */
    public void setPreferredBilingLexMeaningWordLangs(String... value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.eki_user_profile.preferred_biling_lex_meaning_word_langs</code>.
     */
    public String[] getPreferredBilingLexMeaningWordLangs() {
        return (String[]) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Long, Long, Long, String[], String[], String[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<Long, Long, Long, String[], String[], String[]> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return EkiUserProfile.EKI_USER_PROFILE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return EkiUserProfile.EKI_USER_PROFILE.USER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field3() {
        return EkiUserProfile.EKI_USER_PROFILE.RECENT_DATASET_PERMISSION_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String[]> field4() {
        return EkiUserProfile.EKI_USER_PROFILE.PREFERRED_DATASETS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String[]> field5() {
        return EkiUserProfile.EKI_USER_PROFILE.PREFERRED_BILING_CANDIDATE_LANGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String[]> field6() {
        return EkiUserProfile.EKI_USER_PROFILE.PREFERRED_BILING_LEX_MEANING_WORD_LANGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component3() {
        return getRecentDatasetPermissionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] component4() {
        return getPreferredDatasets();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] component5() {
        return getPreferredBilingCandidateLangs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] component6() {
        return getPreferredBilingLexMeaningWordLangs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value3() {
        return getRecentDatasetPermissionId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] value4() {
        return getPreferredDatasets();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] value5() {
        return getPreferredBilingCandidateLangs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] value6() {
        return getPreferredBilingLexMeaningWordLangs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EkiUserProfileRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EkiUserProfileRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EkiUserProfileRecord value3(Long value) {
        setRecentDatasetPermissionId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EkiUserProfileRecord value4(String... value) {
        setPreferredDatasets(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EkiUserProfileRecord value5(String... value) {
        setPreferredBilingCandidateLangs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EkiUserProfileRecord value6(String... value) {
        setPreferredBilingLexMeaningWordLangs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EkiUserProfileRecord values(Long value1, Long value2, Long value3, String[] value4, String[] value5, String[] value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EkiUserProfileRecord
     */
    public EkiUserProfileRecord() {
        super(EkiUserProfile.EKI_USER_PROFILE);
    }

    /**
     * Create a detached, initialised EkiUserProfileRecord
     */
    public EkiUserProfileRecord(Long id, Long userId, Long recentDatasetPermissionId, String[] preferredDatasets, String[] preferredBilingCandidateLangs, String[] preferredBilingLexMeaningWordLangs) {
        super(EkiUserProfile.EKI_USER_PROFILE);

        set(0, id);
        set(1, userId);
        set(2, recentDatasetPermissionId);
        set(3, preferredDatasets);
        set(4, preferredBilingCandidateLangs);
        set(5, preferredBilingLexMeaningWordLangs);
    }
}
