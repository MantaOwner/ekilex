/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.SemanticTypeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SemanticType extends TableImpl<SemanticTypeRecord> {

    private static final long serialVersionUID = 499931760;

    /**
     * The reference instance of <code>public.semantic_type</code>
     */
    public static final SemanticType SEMANTIC_TYPE = new SemanticType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SemanticTypeRecord> getRecordType() {
        return SemanticTypeRecord.class;
    }

    /**
     * The column <code>public.semantic_type.code</code>.
     */
    public final TableField<SemanticTypeRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.semantic_type.datasets</code>.
     */
    public final TableField<SemanticTypeRecord, String[]> DATASETS = createField(DSL.name("datasets"), org.jooq.impl.SQLDataType.VARCHAR(10).getArrayDataType(), this, "");

    /**
     * The column <code>public.semantic_type.order_by</code>.
     */
    public final TableField<SemanticTypeRecord, Long> ORDER_BY = createField(DSL.name("order_by"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('semantic_type_order_by_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.semantic_type</code> table reference
     */
    public SemanticType() {
        this(DSL.name("semantic_type"), null);
    }

    /**
     * Create an aliased <code>public.semantic_type</code> table reference
     */
    public SemanticType(String alias) {
        this(DSL.name(alias), SEMANTIC_TYPE);
    }

    /**
     * Create an aliased <code>public.semantic_type</code> table reference
     */
    public SemanticType(Name alias) {
        this(alias, SEMANTIC_TYPE);
    }

    private SemanticType(Name alias, Table<SemanticTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private SemanticType(Name alias, Table<SemanticTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SemanticType(Table<O> child, ForeignKey<O, SemanticTypeRecord> key) {
        super(child, key, SEMANTIC_TYPE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SemanticTypeRecord, Long> getIdentity() {
        return Keys.IDENTITY_SEMANTIC_TYPE;
    }

    @Override
    public UniqueKey<SemanticTypeRecord> getPrimaryKey() {
        return Keys.SEMANTIC_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<SemanticTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<SemanticTypeRecord>>asList(Keys.SEMANTIC_TYPE_PKEY);
    }

    @Override
    public SemanticType as(String alias) {
        return new SemanticType(DSL.name(alias), this);
    }

    @Override
    public SemanticType as(Name alias) {
        return new SemanticType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SemanticType rename(String name) {
        return new SemanticType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SemanticType rename(Name name) {
        return new SemanticType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String[], Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
