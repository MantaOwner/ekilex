/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables.records;


import eki.ekilex.data.db.tables.Lexeme;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeRecord extends UpdatableRecordImpl<LexemeRecord> implements Record14<Long, Long, Long, String, String, BigDecimal, Integer, Integer, String, String, Long, String, BigDecimal, Boolean> {

    private static final long serialVersionUID = -806525258;

    /**
     * Setter for <code>public.lexeme.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.lexeme.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.lexeme.word_id</code>.
     */
    public void setWordId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.lexeme.word_id</code>.
     */
    public Long getWordId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.lexeme.meaning_id</code>.
     */
    public void setMeaningId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.lexeme.meaning_id</code>.
     */
    public Long getMeaningId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.lexeme.dataset_code</code>.
     */
    public void setDatasetCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.lexeme.dataset_code</code>.
     */
    public String getDatasetCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.lexeme.frequency_group_code</code>.
     */
    public void setFrequencyGroupCode(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.lexeme.frequency_group_code</code>.
     */
    public String getFrequencyGroupCode() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.lexeme.corpus_frequency</code>.
     */
    public void setCorpusFrequency(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.lexeme.corpus_frequency</code>.
     */
    public BigDecimal getCorpusFrequency() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.lexeme.level1</code>.
     */
    public void setLevel1(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.lexeme.level1</code>.
     */
    public Integer getLevel1() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.lexeme.level2</code>.
     */
    public void setLevel2(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.lexeme.level2</code>.
     */
    public Integer getLevel2() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>public.lexeme.value_state_code</code>.
     */
    public void setValueStateCode(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.lexeme.value_state_code</code>.
     */
    public String getValueStateCode() {
        return (String) get(8);
    }

    /**
     * Setter for <code>public.lexeme.complexity</code>.
     */
    public void setComplexity(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.lexeme.complexity</code>.
     */
    public String getComplexity() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.lexeme.order_by</code>.
     */
    public void setOrderBy(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.lexeme.order_by</code>.
     */
    public Long getOrderBy() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>public.lexeme.type</code>.
     */
    public void setType(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.lexeme.type</code>.
     */
    public String getType() {
        return (String) get(11);
    }

    /**
     * Setter for <code>public.lexeme.weight</code>.
     */
    public void setWeight(BigDecimal value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.lexeme.weight</code>.
     */
    public BigDecimal getWeight() {
        return (BigDecimal) get(12);
    }

    /**
     * Setter for <code>public.lexeme.is_public</code>.
     */
    public void setIsPublic(Boolean value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.lexeme.is_public</code>.
     */
    public Boolean getIsPublic() {
        return (Boolean) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Long, String, String, BigDecimal, Integer, Integer, String, String, Long, String, BigDecimal, Boolean> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, Long, Long, String, String, BigDecimal, Integer, Integer, String, String, Long, String, BigDecimal, Boolean> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Lexeme.LEXEME.ID;
    }

    @Override
    public Field<Long> field2() {
        return Lexeme.LEXEME.WORD_ID;
    }

    @Override
    public Field<Long> field3() {
        return Lexeme.LEXEME.MEANING_ID;
    }

    @Override
    public Field<String> field4() {
        return Lexeme.LEXEME.DATASET_CODE;
    }

    @Override
    public Field<String> field5() {
        return Lexeme.LEXEME.FREQUENCY_GROUP_CODE;
    }

    @Override
    public Field<BigDecimal> field6() {
        return Lexeme.LEXEME.CORPUS_FREQUENCY;
    }

    @Override
    public Field<Integer> field7() {
        return Lexeme.LEXEME.LEVEL1;
    }

    @Override
    public Field<Integer> field8() {
        return Lexeme.LEXEME.LEVEL2;
    }

    @Override
    public Field<String> field9() {
        return Lexeme.LEXEME.VALUE_STATE_CODE;
    }

    @Override
    public Field<String> field10() {
        return Lexeme.LEXEME.COMPLEXITY;
    }

    @Override
    public Field<Long> field11() {
        return Lexeme.LEXEME.ORDER_BY;
    }

    @Override
    public Field<String> field12() {
        return Lexeme.LEXEME.TYPE;
    }

    @Override
    public Field<BigDecimal> field13() {
        return Lexeme.LEXEME.WEIGHT;
    }

    @Override
    public Field<Boolean> field14() {
        return Lexeme.LEXEME.IS_PUBLIC;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getWordId();
    }

    @Override
    public Long component3() {
        return getMeaningId();
    }

    @Override
    public String component4() {
        return getDatasetCode();
    }

    @Override
    public String component5() {
        return getFrequencyGroupCode();
    }

    @Override
    public BigDecimal component6() {
        return getCorpusFrequency();
    }

    @Override
    public Integer component7() {
        return getLevel1();
    }

    @Override
    public Integer component8() {
        return getLevel2();
    }

    @Override
    public String component9() {
        return getValueStateCode();
    }

    @Override
    public String component10() {
        return getComplexity();
    }

    @Override
    public Long component11() {
        return getOrderBy();
    }

    @Override
    public String component12() {
        return getType();
    }

    @Override
    public BigDecimal component13() {
        return getWeight();
    }

    @Override
    public Boolean component14() {
        return getIsPublic();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getWordId();
    }

    @Override
    public Long value3() {
        return getMeaningId();
    }

    @Override
    public String value4() {
        return getDatasetCode();
    }

    @Override
    public String value5() {
        return getFrequencyGroupCode();
    }

    @Override
    public BigDecimal value6() {
        return getCorpusFrequency();
    }

    @Override
    public Integer value7() {
        return getLevel1();
    }

    @Override
    public Integer value8() {
        return getLevel2();
    }

    @Override
    public String value9() {
        return getValueStateCode();
    }

    @Override
    public String value10() {
        return getComplexity();
    }

    @Override
    public Long value11() {
        return getOrderBy();
    }

    @Override
    public String value12() {
        return getType();
    }

    @Override
    public BigDecimal value13() {
        return getWeight();
    }

    @Override
    public Boolean value14() {
        return getIsPublic();
    }

    @Override
    public LexemeRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public LexemeRecord value2(Long value) {
        setWordId(value);
        return this;
    }

    @Override
    public LexemeRecord value3(Long value) {
        setMeaningId(value);
        return this;
    }

    @Override
    public LexemeRecord value4(String value) {
        setDatasetCode(value);
        return this;
    }

    @Override
    public LexemeRecord value5(String value) {
        setFrequencyGroupCode(value);
        return this;
    }

    @Override
    public LexemeRecord value6(BigDecimal value) {
        setCorpusFrequency(value);
        return this;
    }

    @Override
    public LexemeRecord value7(Integer value) {
        setLevel1(value);
        return this;
    }

    @Override
    public LexemeRecord value8(Integer value) {
        setLevel2(value);
        return this;
    }

    @Override
    public LexemeRecord value9(String value) {
        setValueStateCode(value);
        return this;
    }

    @Override
    public LexemeRecord value10(String value) {
        setComplexity(value);
        return this;
    }

    @Override
    public LexemeRecord value11(Long value) {
        setOrderBy(value);
        return this;
    }

    @Override
    public LexemeRecord value12(String value) {
        setType(value);
        return this;
    }

    @Override
    public LexemeRecord value13(BigDecimal value) {
        setWeight(value);
        return this;
    }

    @Override
    public LexemeRecord value14(Boolean value) {
        setIsPublic(value);
        return this;
    }

    @Override
    public LexemeRecord values(Long value1, Long value2, Long value3, String value4, String value5, BigDecimal value6, Integer value7, Integer value8, String value9, String value10, Long value11, String value12, BigDecimal value13, Boolean value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LexemeRecord
     */
    public LexemeRecord() {
        super(Lexeme.LEXEME);
    }

    /**
     * Create a detached, initialised LexemeRecord
     */
    public LexemeRecord(Long id, Long wordId, Long meaningId, String datasetCode, String frequencyGroupCode, BigDecimal corpusFrequency, Integer level1, Integer level2, String valueStateCode, String complexity, Long orderBy, String type, BigDecimal weight, Boolean isPublic) {
        super(Lexeme.LEXEME);

        set(0, id);
        set(1, wordId);
        set(2, meaningId);
        set(3, datasetCode);
        set(4, frequencyGroupCode);
        set(5, corpusFrequency);
        set(6, level1);
        set(7, level2);
        set(8, valueStateCode);
        set(9, complexity);
        set(10, orderBy);
        set(11, type);
        set(12, weight);
        set(13, isPublic);
    }
}
