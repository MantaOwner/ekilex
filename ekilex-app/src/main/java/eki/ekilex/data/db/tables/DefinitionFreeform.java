/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.DefinitionFreeformRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefinitionFreeform extends TableImpl<DefinitionFreeformRecord> {

    private static final long serialVersionUID = 1180483380;

    /**
     * The reference instance of <code>public.definition_freeform</code>
     */
    public static final DefinitionFreeform DEFINITION_FREEFORM = new DefinitionFreeform();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefinitionFreeformRecord> getRecordType() {
        return DefinitionFreeformRecord.class;
    }

    /**
     * The column <code>public.definition_freeform.id</code>.
     */
    public final TableField<DefinitionFreeformRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('definition_freeform_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.definition_freeform.definition_id</code>.
     */
    public final TableField<DefinitionFreeformRecord, Long> DEFINITION_ID = createField(DSL.name("definition_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.definition_freeform.freeform_id</code>.
     */
    public final TableField<DefinitionFreeformRecord, Long> FREEFORM_ID = createField(DSL.name("freeform_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.definition_freeform</code> table reference
     */
    public DefinitionFreeform() {
        this(DSL.name("definition_freeform"), null);
    }

    /**
     * Create an aliased <code>public.definition_freeform</code> table reference
     */
    public DefinitionFreeform(String alias) {
        this(DSL.name(alias), DEFINITION_FREEFORM);
    }

    /**
     * Create an aliased <code>public.definition_freeform</code> table reference
     */
    public DefinitionFreeform(Name alias) {
        this(alias, DEFINITION_FREEFORM);
    }

    private DefinitionFreeform(Name alias, Table<DefinitionFreeformRecord> aliased) {
        this(alias, aliased, null);
    }

    private DefinitionFreeform(Name alias, Table<DefinitionFreeformRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DefinitionFreeform(Table<O> child, ForeignKey<O, DefinitionFreeformRecord> key) {
        super(child, key, DEFINITION_FREEFORM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEFINITION_FREEFORM_DEFINITION_ID_IDX, Indexes.DEFINITION_FREEFORM_FREEFORM_ID_IDX);
    }

    @Override
    public Identity<DefinitionFreeformRecord, Long> getIdentity() {
        return Keys.IDENTITY_DEFINITION_FREEFORM;
    }

    @Override
    public UniqueKey<DefinitionFreeformRecord> getPrimaryKey() {
        return Keys.DEFINITION_FREEFORM_PKEY;
    }

    @Override
    public List<UniqueKey<DefinitionFreeformRecord>> getKeys() {
        return Arrays.<UniqueKey<DefinitionFreeformRecord>>asList(Keys.DEFINITION_FREEFORM_PKEY, Keys.DEFINITION_FREEFORM_DEFINITION_ID_FREEFORM_ID_KEY);
    }

    @Override
    public List<ForeignKey<DefinitionFreeformRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DefinitionFreeformRecord, ?>>asList(Keys.DEFINITION_FREEFORM__DEFINITION_FREEFORM_DEFINITION_ID_FKEY, Keys.DEFINITION_FREEFORM__DEFINITION_FREEFORM_FREEFORM_ID_FKEY);
    }

    public Definition definition() {
        return new Definition(this, Keys.DEFINITION_FREEFORM__DEFINITION_FREEFORM_DEFINITION_ID_FKEY);
    }

    public Freeform freeform() {
        return new Freeform(this, Keys.DEFINITION_FREEFORM__DEFINITION_FREEFORM_FREEFORM_ID_FKEY);
    }

    @Override
    public DefinitionFreeform as(String alias) {
        return new DefinitionFreeform(DSL.name(alias), this);
    }

    @Override
    public DefinitionFreeform as(Name alias) {
        return new DefinitionFreeform(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DefinitionFreeform rename(String name) {
        return new DefinitionFreeform(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DefinitionFreeform rename(Name name) {
        return new DefinitionFreeform(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
