/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeClassifierRecord;

import javax.annotation.Generated;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeClassifier extends UDTImpl<TypeClassifierRecord> {

    private static final long serialVersionUID = 1541823312;

    /**
     * The reference instance of <code>public.type_classifier</code>
     */
    public static final TypeClassifier TYPE_CLASSIFIER = new TypeClassifier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeClassifierRecord> getRecordType() {
        return TypeClassifierRecord.class;
    }

    /**
     * The attribute <code>public.type_classifier.name</code>.
     */
    public static final UDTField<TypeClassifierRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100), TYPE_CLASSIFIER, "");

    /**
     * The attribute <code>public.type_classifier.code</code>.
     */
    public static final UDTField<TypeClassifierRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(100), TYPE_CLASSIFIER, "");

    /**
     * The attribute <code>public.type_classifier.value</code>.
     */
    public static final UDTField<TypeClassifierRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB, TYPE_CLASSIFIER, "");

    /**
     * No further instances allowed
     */
    private TypeClassifier() {
        super("type_classifier", null, null, false);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
