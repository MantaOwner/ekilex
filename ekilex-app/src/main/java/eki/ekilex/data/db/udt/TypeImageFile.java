/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.udt;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.udt.records.TypeImageFileRecord;

import org.jooq.Schema;
import org.jooq.UDTField;
import org.jooq.impl.DSL;
import org.jooq.impl.SchemaImpl;
import org.jooq.impl.UDTImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TypeImageFile extends UDTImpl<TypeImageFileRecord> {

    private static final long serialVersionUID = -1614812847;

    /**
     * The reference instance of <code>public.type_image_file</code>
     */
    public static final TypeImageFile TYPE_IMAGE_FILE = new TypeImageFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypeImageFileRecord> getRecordType() {
        return TypeImageFileRecord.class;
    }

    /**
     * The attribute <code>public.type_image_file.freeform_id</code>.
     */
    public static final UDTField<TypeImageFileRecord, Long> FREEFORM_ID = createField(DSL.name("freeform_id"), org.jooq.impl.SQLDataType.BIGINT, TYPE_IMAGE_FILE, "");

    /**
     * The attribute <code>public.type_image_file.image_file</code>.
     */
    public static final UDTField<TypeImageFileRecord, String> IMAGE_FILE = createField(DSL.name("image_file"), org.jooq.impl.SQLDataType.CLOB, TYPE_IMAGE_FILE, "");

    /**
     * The attribute <code>public.type_image_file.image_title</code>.
     */
    public static final UDTField<TypeImageFileRecord, String> IMAGE_TITLE = createField(DSL.name("image_title"), org.jooq.impl.SQLDataType.CLOB, TYPE_IMAGE_FILE, "");

    /**
     * The attribute <code>public.type_image_file.complexity</code>.
     */
    public static final UDTField<TypeImageFileRecord, String> COMPLEXITY = createField(DSL.name("complexity"), org.jooq.impl.SQLDataType.VARCHAR(100), TYPE_IMAGE_FILE, "");

    /**
     * No further instances allowed
     */
    private TypeImageFile() {
        super("type_image_file", null, null, false);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC != null ? Public.PUBLIC : new SchemaImpl(DSL.name("public"));
    }
}
