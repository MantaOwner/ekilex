/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.LexemeFreeformRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LexemeFreeform extends TableImpl<LexemeFreeformRecord> {

    private static final long serialVersionUID = -26164110;

    /**
     * The reference instance of <code>public.lexeme_freeform</code>
     */
    public static final LexemeFreeform LEXEME_FREEFORM = new LexemeFreeform();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LexemeFreeformRecord> getRecordType() {
        return LexemeFreeformRecord.class;
    }

    /**
     * The column <code>public.lexeme_freeform.id</code>.
     */
    public final TableField<LexemeFreeformRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('lexeme_freeform_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.lexeme_freeform.lexeme_id</code>.
     */
    public final TableField<LexemeFreeformRecord, Long> LEXEME_ID = createField(DSL.name("lexeme_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_freeform.freeform_id</code>.
     */
    public final TableField<LexemeFreeformRecord, Long> FREEFORM_ID = createField(DSL.name("freeform_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lexeme_freeform.order_by</code>.
     */
    public final TableField<LexemeFreeformRecord, Long> ORDER_BY = createField(DSL.name("order_by"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('lexeme_freeform_order_by_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.lexeme_freeform</code> table reference
     */
    public LexemeFreeform() {
        this(DSL.name("lexeme_freeform"), null);
    }

    /**
     * Create an aliased <code>public.lexeme_freeform</code> table reference
     */
    public LexemeFreeform(String alias) {
        this(DSL.name(alias), LEXEME_FREEFORM);
    }

    /**
     * Create an aliased <code>public.lexeme_freeform</code> table reference
     */
    public LexemeFreeform(Name alias) {
        this(alias, LEXEME_FREEFORM);
    }

    private LexemeFreeform(Name alias, Table<LexemeFreeformRecord> aliased) {
        this(alias, aliased, null);
    }

    private LexemeFreeform(Name alias, Table<LexemeFreeformRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> LexemeFreeform(Table<O> child, ForeignKey<O, LexemeFreeformRecord> key) {
        super(child, key, LEXEME_FREEFORM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEXEME_FREEFORM_FREEFORM_ID_IDX, Indexes.LEXEME_FREEFORM_LEXEME_ID_IDX);
    }

    @Override
    public Identity<LexemeFreeformRecord, Long> getIdentity() {
        return Keys.IDENTITY_LEXEME_FREEFORM;
    }

    @Override
    public UniqueKey<LexemeFreeformRecord> getPrimaryKey() {
        return Keys.LEXEME_FREEFORM_PKEY;
    }

    @Override
    public List<UniqueKey<LexemeFreeformRecord>> getKeys() {
        return Arrays.<UniqueKey<LexemeFreeformRecord>>asList(Keys.LEXEME_FREEFORM_PKEY, Keys.LEXEME_FREEFORM_LEXEME_ID_FREEFORM_ID_KEY);
    }

    @Override
    public List<ForeignKey<LexemeFreeformRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LexemeFreeformRecord, ?>>asList(Keys.LEXEME_FREEFORM__LEXEME_FREEFORM_LEXEME_ID_FKEY, Keys.LEXEME_FREEFORM__LEXEME_FREEFORM_FREEFORM_ID_FKEY);
    }

    public Lexeme lexeme() {
        return new Lexeme(this, Keys.LEXEME_FREEFORM__LEXEME_FREEFORM_LEXEME_ID_FKEY);
    }

    public Freeform freeform() {
        return new Freeform(this, Keys.LEXEME_FREEFORM__LEXEME_FREEFORM_FREEFORM_ID_FKEY);
    }

    @Override
    public LexemeFreeform as(String alias) {
        return new LexemeFreeform(DSL.name(alias), this);
    }

    @Override
    public LexemeFreeform as(Name alias) {
        return new LexemeFreeform(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeFreeform rename(String name) {
        return new LexemeFreeform(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LexemeFreeform rename(Name name) {
        return new LexemeFreeform(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
