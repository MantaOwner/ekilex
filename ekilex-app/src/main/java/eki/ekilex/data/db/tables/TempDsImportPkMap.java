/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.TempDsImportPkMapRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TempDsImportPkMap extends TableImpl<TempDsImportPkMapRecord> {

    private static final long serialVersionUID = 1977354418;

    /**
     * The reference instance of <code>public.temp_ds_import_pk_map</code>
     */
    public static final TempDsImportPkMap TEMP_DS_IMPORT_PK_MAP = new TempDsImportPkMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TempDsImportPkMapRecord> getRecordType() {
        return TempDsImportPkMapRecord.class;
    }

    /**
     * The column <code>public.temp_ds_import_pk_map.id</code>.
     */
    public final TableField<TempDsImportPkMapRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('temp_ds_import_pk_map_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.import_code</code>.
     */
    public final TableField<TempDsImportPkMapRecord, String> IMPORT_CODE = createField("import_code", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.created_on</code>.
     */
    public final TableField<TempDsImportPkMapRecord, Timestamp> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("statement_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.table_name</code>.
     */
    public final TableField<TempDsImportPkMapRecord, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.source_pk</code>.
     */
    public final TableField<TempDsImportPkMapRecord, Long> SOURCE_PK = createField("source_pk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.temp_ds_import_pk_map.target_pk</code>.
     */
    public final TableField<TempDsImportPkMapRecord, Long> TARGET_PK = createField("target_pk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.temp_ds_import_pk_map</code> table reference
     */
    public TempDsImportPkMap() {
        this(DSL.name("temp_ds_import_pk_map"), null);
    }

    /**
     * Create an aliased <code>public.temp_ds_import_pk_map</code> table reference
     */
    public TempDsImportPkMap(String alias) {
        this(DSL.name(alias), TEMP_DS_IMPORT_PK_MAP);
    }

    /**
     * Create an aliased <code>public.temp_ds_import_pk_map</code> table reference
     */
    public TempDsImportPkMap(Name alias) {
        this(alias, TEMP_DS_IMPORT_PK_MAP);
    }

    private TempDsImportPkMap(Name alias, Table<TempDsImportPkMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private TempDsImportPkMap(Name alias, Table<TempDsImportPkMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TempDsImportPkMap(Table<O> child, ForeignKey<O, TempDsImportPkMapRecord> key) {
        super(child, key, TEMP_DS_IMPORT_PK_MAP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEMP_DS_IMPORT_PK_MAP_IMPORT_CODE_IDX, Indexes.TEMP_DS_IMPORT_PK_MAP_PKEY, Indexes.TEMP_DS_IMPORT_PK_MAP_SOURCE_PK_IDX, Indexes.TEMP_DS_IMPORT_PK_MAP_TABLE_NAME_IDX, Indexes.TEMP_DS_IMPORT_PK_MAP_TARGET_PK_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TempDsImportPkMapRecord, Long> getIdentity() {
        return Keys.IDENTITY_TEMP_DS_IMPORT_PK_MAP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TempDsImportPkMapRecord> getPrimaryKey() {
        return Keys.TEMP_DS_IMPORT_PK_MAP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TempDsImportPkMapRecord>> getKeys() {
        return Arrays.<UniqueKey<TempDsImportPkMapRecord>>asList(Keys.TEMP_DS_IMPORT_PK_MAP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TempDsImportPkMap as(String alias) {
        return new TempDsImportPkMap(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TempDsImportPkMap as(Name alias) {
        return new TempDsImportPkMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TempDsImportPkMap rename(String name) {
        return new TempDsImportPkMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TempDsImportPkMap rename(Name name) {
        return new TempDsImportPkMap(name, null);
    }
}
