/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.LifecycleActivityLogRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LifecycleActivityLog extends TableImpl<LifecycleActivityLogRecord> {

    private static final long serialVersionUID = 524694443;

    /**
     * The reference instance of <code>public.lifecycle_activity_log</code>
     */
    public static final LifecycleActivityLog LIFECYCLE_ACTIVITY_LOG = new LifecycleActivityLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LifecycleActivityLogRecord> getRecordType() {
        return LifecycleActivityLogRecord.class;
    }

    /**
     * The column <code>public.lifecycle_activity_log.id</code>.
     */
    public final TableField<LifecycleActivityLogRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('lifecycle_activity_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.lifecycle_activity_log.lifecycle_log_id</code>.
     */
    public final TableField<LifecycleActivityLogRecord, Long> LIFECYCLE_LOG_ID = createField(DSL.name("lifecycle_log_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.lifecycle_activity_log.activity_log_id</code>.
     */
    public final TableField<LifecycleActivityLogRecord, Long> ACTIVITY_LOG_ID = createField(DSL.name("activity_log_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.lifecycle_activity_log</code> table reference
     */
    public LifecycleActivityLog() {
        this(DSL.name("lifecycle_activity_log"), null);
    }

    /**
     * Create an aliased <code>public.lifecycle_activity_log</code> table reference
     */
    public LifecycleActivityLog(String alias) {
        this(DSL.name(alias), LIFECYCLE_ACTIVITY_LOG);
    }

    /**
     * Create an aliased <code>public.lifecycle_activity_log</code> table reference
     */
    public LifecycleActivityLog(Name alias) {
        this(alias, LIFECYCLE_ACTIVITY_LOG);
    }

    private LifecycleActivityLog(Name alias, Table<LifecycleActivityLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private LifecycleActivityLog(Name alias, Table<LifecycleActivityLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> LifecycleActivityLog(Table<O> child, ForeignKey<O, LifecycleActivityLogRecord> key) {
        super(child, key, LIFECYCLE_ACTIVITY_LOG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LIFECYCLE_ACTIVITY_LOG_AL_ID_IDX, Indexes.LIFECYCLE_ACTIVITY_LOG_LL_ID_IDX);
    }

    @Override
    public Identity<LifecycleActivityLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_LIFECYCLE_ACTIVITY_LOG;
    }

    @Override
    public UniqueKey<LifecycleActivityLogRecord> getPrimaryKey() {
        return Keys.LIFECYCLE_ACTIVITY_LOG_PKEY;
    }

    @Override
    public List<UniqueKey<LifecycleActivityLogRecord>> getKeys() {
        return Arrays.<UniqueKey<LifecycleActivityLogRecord>>asList(Keys.LIFECYCLE_ACTIVITY_LOG_PKEY, Keys.LIFECYCLE_ACTIVITY_LOG_LIFECYCLE_LOG_ID_ACTIVITY_LOG_ID_KEY);
    }

    @Override
    public List<ForeignKey<LifecycleActivityLogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LifecycleActivityLogRecord, ?>>asList(Keys.LIFECYCLE_ACTIVITY_LOG__LIFECYCLE_ACTIVITY_LOG_LIFECYCLE_LOG_ID_FKEY, Keys.LIFECYCLE_ACTIVITY_LOG__LIFECYCLE_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY);
    }

    public LifecycleLog lifecycleLog() {
        return new LifecycleLog(this, Keys.LIFECYCLE_ACTIVITY_LOG__LIFECYCLE_ACTIVITY_LOG_LIFECYCLE_LOG_ID_FKEY);
    }

    public ActivityLog activityLog() {
        return new ActivityLog(this, Keys.LIFECYCLE_ACTIVITY_LOG__LIFECYCLE_ACTIVITY_LOG_ACTIVITY_LOG_ID_FKEY);
    }

    @Override
    public LifecycleActivityLog as(String alias) {
        return new LifecycleActivityLog(DSL.name(alias), this);
    }

    @Override
    public LifecycleActivityLog as(Name alias) {
        return new LifecycleActivityLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleActivityLog rename(String name) {
        return new LifecycleActivityLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LifecycleActivityLog rename(Name name) {
        return new LifecycleActivityLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
