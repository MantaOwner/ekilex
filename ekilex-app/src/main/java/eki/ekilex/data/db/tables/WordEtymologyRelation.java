/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.WordEtymologyRelationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordEtymologyRelation extends TableImpl<WordEtymologyRelationRecord> {

    private static final long serialVersionUID = -1867966632;

    /**
     * The reference instance of <code>public.word_etymology_relation</code>
     */
    public static final WordEtymologyRelation WORD_ETYMOLOGY_RELATION = new WordEtymologyRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordEtymologyRelationRecord> getRecordType() {
        return WordEtymologyRelationRecord.class;
    }

    /**
     * The column <code>public.word_etymology_relation.id</code>.
     */
    public final TableField<WordEtymologyRelationRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('word_etymology_relation_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.word_etymology_relation.word_etym_id</code>.
     */
    public final TableField<WordEtymologyRelationRecord, Long> WORD_ETYM_ID = createField(DSL.name("word_etym_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_etymology_relation.related_word_id</code>.
     */
    public final TableField<WordEtymologyRelationRecord, Long> RELATED_WORD_ID = createField(DSL.name("related_word_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_etymology_relation.comment</code>.
     */
    public final TableField<WordEtymologyRelationRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.word_etymology_relation.comment_prese</code>.
     */
    public final TableField<WordEtymologyRelationRecord, String> COMMENT_PRESE = createField(DSL.name("comment_prese"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.word_etymology_relation.is_questionable</code>.
     */
    public final TableField<WordEtymologyRelationRecord, Boolean> IS_QUESTIONABLE = createField(DSL.name("is_questionable"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.word_etymology_relation.is_compound</code>.
     */
    public final TableField<WordEtymologyRelationRecord, Boolean> IS_COMPOUND = createField(DSL.name("is_compound"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.word_etymology_relation.order_by</code>.
     */
    public final TableField<WordEtymologyRelationRecord, Long> ORDER_BY = createField(DSL.name("order_by"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('word_etymology_relation_order_by_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.word_etymology_relation</code> table reference
     */
    public WordEtymologyRelation() {
        this(DSL.name("word_etymology_relation"), null);
    }

    /**
     * Create an aliased <code>public.word_etymology_relation</code> table reference
     */
    public WordEtymologyRelation(String alias) {
        this(DSL.name(alias), WORD_ETYMOLOGY_RELATION);
    }

    /**
     * Create an aliased <code>public.word_etymology_relation</code> table reference
     */
    public WordEtymologyRelation(Name alias) {
        this(alias, WORD_ETYMOLOGY_RELATION);
    }

    private WordEtymologyRelation(Name alias, Table<WordEtymologyRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordEtymologyRelation(Name alias, Table<WordEtymologyRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> WordEtymologyRelation(Table<O> child, ForeignKey<O, WordEtymologyRelationRecord> key) {
        super(child, key, WORD_ETYMOLOGY_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORD_ETYM_REL_REL_WORD_ID_IDX, Indexes.WORD_ETYM_REL_WORD_ETYM_ID_IDX);
    }

    @Override
    public Identity<WordEtymologyRelationRecord, Long> getIdentity() {
        return Keys.IDENTITY_WORD_ETYMOLOGY_RELATION;
    }

    @Override
    public UniqueKey<WordEtymologyRelationRecord> getPrimaryKey() {
        return Keys.WORD_ETYMOLOGY_RELATION_PKEY;
    }

    @Override
    public List<UniqueKey<WordEtymologyRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<WordEtymologyRelationRecord>>asList(Keys.WORD_ETYMOLOGY_RELATION_PKEY, Keys.WORD_ETYMOLOGY_RELATION_WORD_ETYM_ID_RELATED_WORD_ID_KEY);
    }

    @Override
    public List<ForeignKey<WordEtymologyRelationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordEtymologyRelationRecord, ?>>asList(Keys.WORD_ETYMOLOGY_RELATION__WORD_ETYMOLOGY_RELATION_WORD_ETYM_ID_FKEY, Keys.WORD_ETYMOLOGY_RELATION__WORD_ETYMOLOGY_RELATION_RELATED_WORD_ID_FKEY);
    }

    public WordEtymology wordEtymology() {
        return new WordEtymology(this, Keys.WORD_ETYMOLOGY_RELATION__WORD_ETYMOLOGY_RELATION_WORD_ETYM_ID_FKEY);
    }

    public Word word() {
        return new Word(this, Keys.WORD_ETYMOLOGY_RELATION__WORD_ETYMOLOGY_RELATION_RELATED_WORD_ID_FKEY);
    }

    @Override
    public WordEtymologyRelation as(String alias) {
        return new WordEtymologyRelation(DSL.name(alias), this);
    }

    @Override
    public WordEtymologyRelation as(Name alias) {
        return new WordEtymologyRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordEtymologyRelation rename(String name) {
        return new WordEtymologyRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordEtymologyRelation rename(Name name) {
        return new WordEtymologyRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, String, String, Boolean, Boolean, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
