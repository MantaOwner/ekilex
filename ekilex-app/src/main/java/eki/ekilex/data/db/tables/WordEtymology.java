/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.WordEtymologyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordEtymology extends TableImpl<WordEtymologyRecord> {

    private static final long serialVersionUID = 591250062;

    /**
     * The reference instance of <code>public.word_etymology</code>
     */
    public static final WordEtymology WORD_ETYMOLOGY = new WordEtymology();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordEtymologyRecord> getRecordType() {
        return WordEtymologyRecord.class;
    }

    /**
     * The column <code>public.word_etymology.id</code>.
     */
    public final TableField<WordEtymologyRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('word_etymology_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.word_etymology.word_id</code>.
     */
    public final TableField<WordEtymologyRecord, Long> WORD_ID = createField(DSL.name("word_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_etymology.etymology_type_code</code>.
     */
    public final TableField<WordEtymologyRecord, String> ETYMOLOGY_TYPE_CODE = createField(DSL.name("etymology_type_code"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.word_etymology.etymology_year</code>.
     */
    public final TableField<WordEtymologyRecord, String> ETYMOLOGY_YEAR = createField(DSL.name("etymology_year"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.word_etymology.comment</code>.
     */
    public final TableField<WordEtymologyRecord, String> COMMENT = createField(DSL.name("comment"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.word_etymology.comment_prese</code>.
     */
    public final TableField<WordEtymologyRecord, String> COMMENT_PRESE = createField(DSL.name("comment_prese"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.word_etymology.is_questionable</code>.
     */
    public final TableField<WordEtymologyRecord, Boolean> IS_QUESTIONABLE = createField(DSL.name("is_questionable"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.word_etymology.order_by</code>.
     */
    public final TableField<WordEtymologyRecord, Long> ORDER_BY = createField(DSL.name("order_by"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('word_etymology_order_by_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>public.word_etymology</code> table reference
     */
    public WordEtymology() {
        this(DSL.name("word_etymology"), null);
    }

    /**
     * Create an aliased <code>public.word_etymology</code> table reference
     */
    public WordEtymology(String alias) {
        this(DSL.name(alias), WORD_ETYMOLOGY);
    }

    /**
     * Create an aliased <code>public.word_etymology</code> table reference
     */
    public WordEtymology(Name alias) {
        this(alias, WORD_ETYMOLOGY);
    }

    private WordEtymology(Name alias, Table<WordEtymologyRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordEtymology(Name alias, Table<WordEtymologyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> WordEtymology(Table<O> child, ForeignKey<O, WordEtymologyRecord> key) {
        super(child, key, WORD_ETYMOLOGY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORD_ETYM_ETYM_TYPE_CODE_IDX, Indexes.WORD_ETYM_WORD_ID_IDX);
    }

    @Override
    public Identity<WordEtymologyRecord, Long> getIdentity() {
        return Keys.IDENTITY_WORD_ETYMOLOGY;
    }

    @Override
    public UniqueKey<WordEtymologyRecord> getPrimaryKey() {
        return Keys.WORD_ETYMOLOGY_PKEY;
    }

    @Override
    public List<UniqueKey<WordEtymologyRecord>> getKeys() {
        return Arrays.<UniqueKey<WordEtymologyRecord>>asList(Keys.WORD_ETYMOLOGY_PKEY);
    }

    @Override
    public List<ForeignKey<WordEtymologyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordEtymologyRecord, ?>>asList(Keys.WORD_ETYMOLOGY__WORD_ETYMOLOGY_WORD_ID_FKEY, Keys.WORD_ETYMOLOGY__WORD_ETYMOLOGY_ETYMOLOGY_TYPE_CODE_FKEY);
    }

    public Word word() {
        return new Word(this, Keys.WORD_ETYMOLOGY__WORD_ETYMOLOGY_WORD_ID_FKEY);
    }

    public EtymologyType etymologyType() {
        return new EtymologyType(this, Keys.WORD_ETYMOLOGY__WORD_ETYMOLOGY_ETYMOLOGY_TYPE_CODE_FKEY);
    }

    @Override
    public WordEtymology as(String alias) {
        return new WordEtymology(DSL.name(alias), this);
    }

    @Override
    public WordEtymology as(Name alias) {
        return new WordEtymology(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordEtymology rename(String name) {
        return new WordEtymology(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordEtymology rename(Name name) {
        return new WordEtymology(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, String, String, Boolean, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
