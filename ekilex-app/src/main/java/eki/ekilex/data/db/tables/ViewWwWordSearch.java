/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ViewWwWordSearchRecord;
import eki.ekilex.data.db.udt.records.TypeLangComplexityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwWordSearch extends TableImpl<ViewWwWordSearchRecord> {

    private static final long serialVersionUID = -63419967;

    /**
     * The reference instance of <code>public.view_ww_word_search</code>
     */
    public static final ViewWwWordSearch VIEW_WW_WORD_SEARCH = new ViewWwWordSearch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwWordSearchRecord> getRecordType() {
        return ViewWwWordSearchRecord.class;
    }

    /**
     * The column <code>public.view_ww_word_search.sgroup</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String> SGROUP = createField(DSL.name("sgroup"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_word_search.word</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String> WORD = createField(DSL.name("word"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_word_search.crit</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String> CRIT = createField(DSL.name("crit"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_word_search.unacrit</code>.
     */
    public final TableField<ViewWwWordSearchRecord, String> UNACRIT = createField(DSL.name("unacrit"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_word_search.lang_order_by</code>.
     */
    public final TableField<ViewWwWordSearchRecord, Long> LANG_ORDER_BY = createField(DSL.name("lang_order_by"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_word_search.lang_complexities</code>.
     */
    public final TableField<ViewWwWordSearchRecord, TypeLangComplexityRecord[]> LANG_COMPLEXITIES = createField(DSL.name("lang_complexities"), eki.ekilex.data.db.udt.TypeLangComplexity.TYPE_LANG_COMPLEXITY.getDataType().getArrayDataType(), this, "");

    /**
     * The column <code>public.view_ww_word_search.detail_exists</code>.
     */
    public final TableField<ViewWwWordSearchRecord, Boolean> DETAIL_EXISTS = createField(DSL.name("detail_exists"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.view_ww_word_search.simple_exists</code>.
     */
    public final TableField<ViewWwWordSearchRecord, Boolean> SIMPLE_EXISTS = createField(DSL.name("simple_exists"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>public.view_ww_word_search</code> table reference
     */
    public ViewWwWordSearch() {
        this(DSL.name("view_ww_word_search"), null);
    }

    /**
     * Create an aliased <code>public.view_ww_word_search</code> table reference
     */
    public ViewWwWordSearch(String alias) {
        this(DSL.name(alias), VIEW_WW_WORD_SEARCH);
    }

    /**
     * Create an aliased <code>public.view_ww_word_search</code> table reference
     */
    public ViewWwWordSearch(Name alias) {
        this(alias, VIEW_WW_WORD_SEARCH);
    }

    private ViewWwWordSearch(Name alias, Table<ViewWwWordSearchRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwWordSearch(Name alias, Table<ViewWwWordSearchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_word_search\" as  SELECT ws.sgroup,\n    ws.word,\n    ws.crit,\n    unaccent(ws.crit) AS unacrit,\n    ws.lang_order_by,\n    wlc.lang_complexities,\n    wlc.detail_exists,\n    wlc.simple_exists\n   FROM ( SELECT 'word'::text AS sgroup,\n            fw.value AS word,\n            lower(fw.value) AS crit,\n            (array_agg(wl.order_by ORDER BY wl.order_by))[1] AS lang_order_by\n           FROM form fw,\n            paradigm p,\n            word w,\n            language wl\n          WHERE (((fw.mode)::text = 'WORD'::text) AND (fw.paradigm_id = p.id) AND (p.word_id = w.id) AND (w.lang = wl.code) AND (EXISTS ( SELECT w.id\n                   FROM lexeme l,\n                    dataset ds\n                  WHERE ((l.word_id = w.id) AND ((l.type)::text = 'PRIMARY'::text) AND ((l.process_state_code)::text = 'avalik'::text) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))))\n          GROUP BY fw.value\n        UNION ALL\n         SELECT 'as_word'::text AS sgroup,\n            fw.value AS word,\n            lower(faw.value) AS crit,\n            (array_agg(wl.order_by ORDER BY wl.order_by))[1] AS lang_order_by\n           FROM form fw,\n            form faw,\n            paradigm p,\n            word w,\n            language wl\n          WHERE (((fw.mode)::text = 'WORD'::text) AND ((faw.mode)::text = 'AS_WORD'::text) AND (faw.paradigm_id = p.id) AND (fw.paradigm_id = p.id) AND (p.word_id = w.id) AND (w.lang = wl.code) AND (EXISTS ( SELECT w.id\n                   FROM lexeme l,\n                    dataset ds\n                  WHERE ((l.word_id = w.id) AND ((l.type)::text = 'PRIMARY'::text) AND ((l.process_state_code)::text = 'avalik'::text) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))))\n          GROUP BY fw.value, faw.value\n        UNION ALL\n         SELECT 'form'::text AS sgroup,\n            fw.value AS word,\n            lower(f.value) AS crit,\n            (array_agg(wl.order_by ORDER BY wl.order_by))[1] AS lang_order_by\n           FROM form fw,\n            form f,\n            paradigm p,\n            word w,\n            language wl\n          WHERE (((fw.mode)::text = 'WORD'::text) AND ((f.mode)::text = 'FORM'::text) AND (fw.paradigm_id = p.id) AND (f.paradigm_id = p.id) AND (p.word_id = w.id) AND (w.lang = wl.code) AND (EXISTS ( SELECT w.id\n                   FROM lexeme l,\n                    dataset ds\n                  WHERE ((l.word_id = w.id) AND ((l.type)::text = 'PRIMARY'::text) AND ((l.process_state_code)::text = 'avalik'::text) AND ((ds.code)::text = (l.dataset_code)::text) AND (ds.is_public = true)))) AND (fw.value <> f.value))\n          GROUP BY fw.value, f.value) ws,\n    ( SELECT lc.word,\n            array_agg(DISTINCT ROW((\n                CASE\n                    WHEN (lc.lang = ANY (ARRAY['est'::bpchar, 'rus'::bpchar, 'eng'::bpchar])) THEN lc.lang\n                    ELSE 'other'::bpchar\n                END)::character varying(10), lc.complexity)::type_lang_complexity) AS lang_complexities,\n            ('{DETAIL,ANY}'::character varying[] && array_agg(lc.complexity)) AS detail_exists,\n            ('{SIMPLE,ANY}'::character varying[] && array_agg(lc.complexity)) AS simple_exists\n           FROM ( SELECT (( SELECT array_agg(DISTINCT f.value) AS array_agg\n                           FROM paradigm p,\n                            form f\n                          WHERE ((p.word_id = l1.word_id) AND (f.paradigm_id = p.id) AND ((f.mode)::text = 'WORD'::text))))[1] AS word,\n                    w2.lang,\n                    l2.complexity\n                   FROM ((((lexeme l1\n                     JOIN dataset l1ds ON (((l1ds.code)::text = (l1.dataset_code)::text)))\n                     JOIN lexeme l2 ON (((l2.meaning_id = l1.meaning_id) AND ((l2.dataset_code)::text = (l1.dataset_code)::text) AND (l2.word_id <> l1.word_id))))\n                     JOIN dataset l2ds ON (((l2ds.code)::text = (l2.dataset_code)::text)))\n                     JOIN word w2 ON ((w2.id = l2.word_id)))\n                  WHERE (((l1.type)::text = 'PRIMARY'::text) AND ((l1.process_state_code)::text = 'avalik'::text) AND (l1ds.is_public = true) AND ((l2.process_state_code)::text = 'avalik'::text) AND (l2ds.is_public = true))) lc\n          GROUP BY lc.word) wlc\n  WHERE (ws.word = wlc.word)\n  ORDER BY ws.sgroup, ws.word, ws.crit;"));
    }

    public <O extends Record> ViewWwWordSearch(Table<O> child, ForeignKey<O, ViewWwWordSearchRecord> key) {
        super(child, key, VIEW_WW_WORD_SEARCH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwWordSearch as(String alias) {
        return new ViewWwWordSearch(DSL.name(alias), this);
    }

    @Override
    public ViewWwWordSearch as(Name alias) {
        return new ViewWwWordSearch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordSearch rename(String name) {
        return new ViewWwWordSearch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwWordSearch rename(Name name) {
        return new ViewWwWordSearch(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, Long, TypeLangComplexityRecord[], Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
